name: Build and deploy

on:
  push:
    branches:
      - main
      - sandbox
      - catbox
      - magicbox
      - dreambox
      - coffeebox
      - codebox
    paths-ignore:
      - '.gitignore'
      - 'CODEOWNERS'
      - 'LICENSE.md'
      - 'README.md'
  workflow_dispatch:
    inputs:
      prod:
        description: Deploy to production
        type: boolean
        required: false

jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Use Node.js v22.16.0
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          registry-url: 'https://npm.pkg.github.com'

      - name: Cache node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}

      - name: Fetch openapi backend types
        run: npx openapi-typescript ${{ github.event.inputs.prod == 'true' && 'https://www.nav.no/pensjon/kalkulator/v3/api-docs/current' || 'https://staging.ekstern.dev.nav.no/pensjon/kalkulator/v3/api-docs/current' }} -o ./src/types/schema.d.ts

      - name: Format backend scheme
        run: npm run format:types

      - name: Build staging application
        if: github.event.inputs.prod != 'true'
        run: npm run build

      - name: Build production application
        if: github.event.inputs.prod == 'true'
        run: npm run build:production

      - name: Build backend for frontend
        run: npm run build:server

      - name: Save build folder
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          if-no-files-found: error
          retention-days: 1

      - name: Create Docker image
        id: image-creation
        uses: nais/docker-build-push@v0
        with:
          dockerfile: .docker/Dockerfile
          team: pensjonskalkulator
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
    outputs:
      image: ${{ steps.image-creation.outputs.image }}

  run-unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Use Node.js v22.16.0
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          registry-url: 'https://npm.pkg.github.com'

      - name: Cache node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}

      - name: Run unit tests
        run: npm run test

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage

  run-integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Use Node.js v22.16.0
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          registry-url: 'https://npm.pkg.github.com'

      - name: Cache node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Cache Cypress binary
        id: cache-cypress
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}

      - name: Download the build folders
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist

      - name: Install dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}

      - name: Install cypress
        if: steps.cache-cypress.outputs.cache-hit != 'true'
        run: npx cypress install

      - name: Run integration tests on staging application
        if: github.event.inputs.prod  != 'true'
        run: npm run cy:test

      - name: Run integration tests on production application
        if: github.event.inputs.prod  == 'true'
        run: npm run cy:test:production

      - name: Archive Cypress artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: cypress/screenshots

  deploy-staging:
    name: Deploy to staging
    needs: [build, run-unit-tests, run-integration-tests]
    permissions:
      id-token: 'write'
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch') &&
      github.event.inputs.prod != 'true' &&
      github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy to staging
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-staging.yml,.nais/unleash-api-token-dev.yaml

      - name: Deploy veiledning to staging
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-veiledning-staging.yml

  deploy-sandbox:
    name: Deploy to sandbox
    needs: [build]
    permissions:
      id-token: 'write'
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch') &&
      github.event.inputs.prod != 'true' &&
      github.ref == 'refs/heads/sandbox'
    env:
      IMAGE: ghcr.io/${{ github.repository }}/pensjonskalkulator-frontend-node:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy to sandbox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-sandbox.yml,.nais/unleash-api-token-dev.yaml

      - name: Deploy veiledning to sandbox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-veiledning-sandbox.yml

  deploy-catbox:
    name: Deploy to catbox
    needs: [build]
    permissions:
      id-token: 'write'
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch') &&
      github.event.inputs.prod != 'true' &&
      github.ref == 'refs/heads/catbox'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy to catbox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-catbox.yml,.nais/unleash-api-token-dev.yaml

      - name: Deploy veiledning to catbox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-veiledning-catbox.yml

  deploy-magicbox:
    name: Deploy to magicbox
    needs: [build]
    permissions:
      id-token: 'write'
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch') &&
      github.event.inputs.prod != 'true' &&
      github.ref == 'refs/heads/magicbox'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy to magicbox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-magicbox.yml,.nais/unleash-api-token-dev.yaml

      - name: Deploy veiledning to magicbox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-veiledning-magicbox.yml

  deploy-dreambox:
    name: Deploy to dreambox
    needs: [build]
    permissions:
      id-token: 'write'
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch') &&
      github.event.inputs.prod != 'true' &&
      github.ref == 'refs/heads/dreambox'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy to dreambox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-dreambox.yml,.nais/unleash-api-token-dev.yaml

      - name: Deploy veiledning to dreambox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-veiledning-dreambox.yml

  deploy-coffeebox:
    name: Deploy to coffeebox
    needs: [build]
    permissions:
      id-token: 'write'
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch') &&
      github.event.inputs.prod != 'true' &&
      github.ref == 'refs/heads/coffeebox'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy to coffeebox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-coffeebox.yml,.nais/unleash-api-token-dev.yaml

      - name: Deploy veiledning to coffeebox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-veiledning-coffeebox.yml

  deploy-codebox:
    name: Deploy to codebox
    needs: [build]
    permissions:
      id-token: 'write'
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch') &&
      github.event.inputs.prod != 'true' &&
      github.ref == 'refs/heads/codebox'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy to codebox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-codebox.yml,.nais/unleash-api-token-dev.yaml

      - name: Deploy veiledning to codebox
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-veiledning-codebox.yml

  deploy-prod:
    name: Deploy to prod-gcp
    needs: [build, run-unit-tests, run-integration-tests]
    permissions:
      id-token: 'write'
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.prod == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy to prod-gcp
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: prod-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-prod.yml,.nais/unleash-api-token-prod.yaml

      - name: Deploy veiledning to prod-gcp
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: prod-gcp
          IMAGE: ${{ needs.build.outputs.image }}
          RESOURCE: .nais/deploy-veiledning-prod.yml

      - name: Notify Slack of successful production deploy
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_PROD_DEPLOY_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          PR_NUMBER=$(echo "$COMMIT_MSG" | grep -oE "#[0-9]+" | tr -d '#')

          if [ -z "$PR_NUMBER" ]; then
            # No PR number found, send notification with just commit info
            COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
            curl -X POST -H 'Content-type: application/json' --data "{
              \"text\": \"🚀 *Production deploy complete!*\n*Commit Message:* $COMMIT_MSG\n*Author:* $COMMIT_AUTHOR\n*Commit:* <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\" 
            }" $SLACK_WEBHOOK_URL
          else
            # PR number found, get PR details and send notification
            PR_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER)

            PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
            PR_URL=$(echo "$PR_DATA" | jq -r '.html_url')
            PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.user.login')

            curl -X POST -H 'Content-type: application/json' --data "{
              \"text\": \"🚀 *Production deploy complete!*\n*PR:* <$PR_URL|$PR_TITLE> by \`@$PR_AUTHOR\`\n*Commit:* <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\" 
            }" $SLACK_WEBHOOK_URL
          fi
