/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/tidligste-uttaksalder": {
    /**
     * Første mulige uttaksalder
     * @description Finn første mulige uttaksalder for innlogget bruker. Feltet 'harEps' brukes til å angi om brukeren har ektefelle/partner/samboer eller ei
     */
    post: operations["finnTidligsteUttaksalderV1"];
  };
  "/api/v1/pensjonsavtaler": {
    /**
     * Hent pensjonsavtaler
     * @description Henter pensjonsavtalene til den innloggede brukeren. I request må verdi av 'maaneder' være 0..11.
     */
    post: operations["fetchAvtalerV1"];
  };
  "/api/v1/alderspensjon/simulering": {
    /**
     * Simuler alderspensjon
     * @description Lag en prognose for framtidig alderspensjon. Feltet 'epsHarInntektOver2G' brukes til å angi om ektefelle/partner/samboer har inntekt over 2 ganger grunnbeløpet eller ei.
     */
    post: operations["simulerAlderspensjon"];
  };
  "/api/ufoerepensjon": {
    /**
     * Har løpende uføretrygd
     * @description Hvorvidt den innloggede brukeren har løpende uføretrygd
     */
    post: operations["harUfoeretrygd"];
  };
  "/api/tpo-medlemskap": {
    /**
     * Har offentlig tjenestepensjonsforhold
     * @description Hvorvidt den innloggede brukeren har offentlig tjenestepensjonsforhold
     */
    get: operations["harTjenestepensjonsforhold"];
  };
  "/api/status": {
    /**
     * Sjekk status
     * @description Hent status for applikasjonens helsetilstand
     */
    get: operations["status"];
  };
  "/api/sak-status": {
    /**
     * Har uføretrygd/gjenlevendeytelse
     * @description Hvorvidt den innloggede brukeren har løpende uføretrygd eller gjenlevendeytelse
     */
    get: operations["harRelevantSak"];
  };
  "/api/person": {
    /**
     * Hent personinformasjon
     * @description Henter personinformasjon om den innloggede brukeren
     */
    get: operations["person"];
  };
  "/api/inntekt": {
    /**
     * Siste pensjonsgivende inntekt
     * @description Henter den innloggede brukerens sist skattelignede pensjonsgivende inntekt
     */
    get: operations["sistePensjonsgivendeInntekt"];
  };
  "/api/grunnbeloep": {
    /**
     * Hent grunnbeløp
     * @description Hent grunnbeløpet i folketrygden (G) for nåværende tidspunkt
     */
    get: operations["getGrunnbeloep"];
  };
  "/api/feature/{name}": {
    /**
     * Hvorvidt en gitt funksjonsbryter er skrudd på
     * @description Hent status for en gitt funksjonsbryter (hvorvidt funksjonen er skrudd på)
     */
    get: operations["isEnabled"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UttaksalderIngressSpecDto: {
      /** @enum {string} */
      sivilstand?: "UNKNOWN" | "UOPPGITT" | "UGIFT" | "GIFT" | "ENKE_ELLER_ENKEMANN" | "SKILT" | "SEPARERT" | "REGISTRERT_PARTNER" | "SEPARERT_PARTNER" | "SKILT_PARTNER" | "GJENLEVENDE_PARTNER" | "SAMBOER";
      harEps?: boolean;
      /** Format: int32 */
      sisteInntekt?: number;
      /** @enum {string} */
      simuleringstype?: "ALDERSPENSJON" | "ALDERSPENSJON_MED_AFP_PRIVAT";
    };
    AlderDto: {
      /** Format: int32 */
      aar: number;
      /** Format: int32 */
      maaneder: number;
    };
    Alder: {
      /** Format: int32 */
      aar: number;
      /** Format: int32 */
      maaneder: number;
    };
    PensjonsavtaleIngressSpecDto: {
      /** Format: int32 */
      aarligInntektFoerUttak: number;
      uttaksperioder: components["schemas"]["UttaksperiodeIngressSpecDto"][];
      /** Format: int32 */
      antallInntektsaarEtterUttak: number;
      harAfp?: boolean;
      harEpsPensjon?: boolean;
      harEpsPensjonsgivendeInntektOver2G?: boolean;
      /** Format: int32 */
      antallAarIUtlandetEtter16?: number;
      /** @enum {string} */
      sivilstand?: "UNKNOWN" | "UOPPGITT" | "UGIFT" | "GIFT" | "ENKE_ELLER_ENKEMANN" | "SKILT" | "SEPARERT" | "REGISTRERT_PARTNER" | "SEPARERT_PARTNER" | "SKILT_PARTNER" | "GJENLEVENDE_PARTNER" | "SAMBOER";
    };
    UttaksperiodeIngressSpecDto: {
      startAlder: components["schemas"]["Alder"];
      /** Format: int32 */
      grad: number;
      /** Format: int32 */
      aarligInntekt: number;
    };
    PensjonsavtaleDto: {
      produktbetegnelse: string;
      /** @enum {string} */
      kategori: "NONE" | "UNKNOWN" | "INDIVIDUELL_ORDNING" | "PRIVAT_AFP" | "PRIVAT_TJENESTEPENSJON" | "OFFENTLIG_TJENESTEPENSJON" | "FOLKETRYGD";
      /** Format: int32 */
      startAar: number;
      /** Format: int32 */
      sluttAar?: number;
      utbetalingsperioder: components["schemas"]["UtbetalingsperiodeDto"][];
    };
    PensjonsavtalerDto: {
      avtaler: components["schemas"]["PensjonsavtaleDto"][];
      utilgjengeligeSelskap: components["schemas"]["SelskapDto"][];
    };
    SelskapDto: {
      navn: string;
      heltUtilgjengelig: boolean;
    };
    UtbetalingsperiodeDto: {
      startAlder: components["schemas"]["Alder"];
      sluttAlder?: components["schemas"]["Alder"];
      /** Format: int32 */
      aarligUtbetaling: number;
      /** Format: int32 */
      grad: number;
    };
    SimuleringAlderDto: {
      /** Format: int32 */
      aar: number;
      /** Format: int32 */
      maaneder: number;
    };
    SimuleringSpecDto: {
      /** @enum {string} */
      simuleringstype: "ALDERSPENSJON" | "ALDERSPENSJON_MED_AFP_PRIVAT";
      /** Format: int32 */
      uttaksgrad: number;
      foersteUttaksalder: components["schemas"]["SimuleringAlderDto"];
      /** Format: date */
      foedselsdato: string;
      epsHarInntektOver2G: boolean;
      /** Format: int32 */
      forventetInntekt?: number;
      /** @enum {string} */
      sivilstand?: "UNKNOWN" | "UOPPGITT" | "UGIFT" | "GIFT" | "ENKE_ELLER_ENKEMANN" | "SKILT" | "SEPARERT" | "REGISTRERT_PARTNER" | "SEPARERT_PARTNER" | "SKILT_PARTNER" | "GJENLEVENDE_PARTNER" | "SAMBOER";
    };
    UfoerepensjonSpecDto: {
      /** Format: date */
      fom: string;
    };
    UfoerepensjonDto: {
      harUfoerepensjon: boolean;
    };
    TjenestepensjonsforholdDto: {
      harTjenestepensjonsforhold: boolean;
    };
    SakDto: {
      harUfoeretrygdEllerGjenlevendeytelse: boolean;
    };
    PersonDto: {
      fornavn?: string;
      /** Format: date */
      foedselsdato?: string;
      /** @enum {string} */
      sivilstand?: "UNKNOWN" | "UOPPGITT" | "UGIFT" | "GIFT" | "ENKE_ELLER_ENKEMANN" | "SKILT" | "SEPARERT" | "REGISTRERT_PARTNER" | "SEPARERT_PARTNER" | "SKILT_PARTNER" | "GJENLEVENDE_PARTNER" | "SAMBOER";
    };
    InntektDto: {
      /** Format: int32 */
      beloep: number;
      /** Format: int32 */
      aar: number;
    };
    Grunnbeloep: {
      /** Format: int32 */
      value: number;
    };
    EnablementDto: {
      enabled: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Første mulige uttaksalder
   * @description Finn første mulige uttaksalder for innlogget bruker. Feltet 'harEps' brukes til å angi om brukeren har ektefelle/partner/samboer eller ei
   */
  finnTidligsteUttaksalderV1: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UttaksalderIngressSpecDto"];
      };
    };
    responses: {
      /** @description Søk etter uttaksalder utført. I resultatet er verdi av 'maaneder' 0..11. */
      200: {
        content: {
          "*/*": components["schemas"]["AlderDto"];
        };
      };
      /** @description Søk etter uttaksalder kunne ikke utføres av tekniske årsaker */
      503: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /**
   * Hent pensjonsavtaler
   * @description Henter pensjonsavtalene til den innloggede brukeren. I request må verdi av 'maaneder' være 0..11.
   */
  fetchAvtalerV1: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PensjonsavtaleIngressSpecDto"];
      };
    };
    responses: {
      /** @description Henting av pensjonsavtaler utført. I respons er verdi av 'maaneder' 0..11. */
      200: {
        content: {
          "*/*": components["schemas"]["PensjonsavtalerDto"];
        };
      };
      /** @description Henting av pensjonsavtaler kunne ikke utføres av tekniske årsaker */
      503: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /**
   * Simuler alderspensjon
   * @description Lag en prognose for framtidig alderspensjon. Feltet 'epsHarInntektOver2G' brukes til å angi om ektefelle/partner/samboer har inntekt over 2 ganger grunnbeløpet eller ei.
   */
  simulerAlderspensjon: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimuleringSpecDto"];
      };
    };
    responses: {
      /** @description Simulering utført (men dersom vilkår ikke oppfylt vil responsen ikke inneholde pensjonsbeløp). */
      200: {
        content: {
          "*/*": unknown;
        };
      };
      /** @description Simulering kunne ikke utføres av tekniske årsaker */
      503: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /**
   * Har løpende uføretrygd
   * @description Hvorvidt den innloggede brukeren har løpende uføretrygd
   */
  harUfoeretrygd: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UfoerepensjonSpecDto"];
      };
    };
    responses: {
      /** @description Sjekking av uføretrygd utført */
      200: {
        content: {
          "*/*": components["schemas"]["UfoerepensjonDto"];
        };
      };
      /** @description Sjekking av uføretrygd kunne ikke utføres av tekniske årsaker */
      503: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /**
   * Har offentlig tjenestepensjonsforhold
   * @description Hvorvidt den innloggede brukeren har offentlig tjenestepensjonsforhold
   */
  harTjenestepensjonsforhold: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TjenestepensjonsforholdDto"];
        };
      };
    };
  };
  /**
   * Sjekk status
   * @description Hent status for applikasjonens helsetilstand
   */
  status: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /**
   * Har uføretrygd/gjenlevendeytelse
   * @description Hvorvidt den innloggede brukeren har løpende uføretrygd eller gjenlevendeytelse
   */
  harRelevantSak: {
    responses: {
      /** @description Sjekking av saker utført */
      200: {
        content: {
          "*/*": components["schemas"]["SakDto"];
        };
      };
      /** @description Sjekking av saker kunne ikke utføres av tekniske årsaker */
      503: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /**
   * Hent personinformasjon
   * @description Henter personinformasjon om den innloggede brukeren
   */
  person: {
    parameters: {
      query?: {
        spec?: components["schemas"]["UttaksalderIngressSpecDto"];
      };
    };
    responses: {
      /** @description Henting av personinformasjon utført. I resultatet er verdi av 'maaneder' 0..11. */
      200: {
        content: {
          "*/*": components["schemas"]["PersonDto"];
        };
      };
      /** @description Henting av personinformasjon kunne ikke utføres av tekniske årsaker */
      503: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /**
   * Siste pensjonsgivende inntekt
   * @description Henter den innloggede brukerens sist skattelignede pensjonsgivende inntekt
   */
  sistePensjonsgivendeInntekt: {
    responses: {
      /** @description Henting av inntekt utført. */
      200: {
        content: {
          "*/*": components["schemas"]["InntektDto"];
        };
      };
      /** @description Henting av inntekt kunne ikke utføres av tekniske årsaker */
      503: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
  /**
   * Hent grunnbeløp
   * @description Hent grunnbeløpet i folketrygden (G) for nåværende tidspunkt
   */
  getGrunnbeloep: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Grunnbeloep"];
        };
      };
    };
  };
  /**
   * Hvorvidt en gitt funksjonsbryter er skrudd på
   * @description Hent status for en gitt funksjonsbryter (hvorvidt funksjonen er skrudd på)
   */
  isEnabled: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description Sjekking av funksjonsbryter-status */
      200: {
        content: {
          "*/*": components["schemas"]["EnablementDto"];
        };
      };
      /** @description Sjekking av funksjonsbryter-status kunne ikke utføres av tekniske årsaker */
      503: {
        content: {
          "*/*": unknown;
        };
      };
    };
  };
}
